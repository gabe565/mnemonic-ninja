name: Build

on: push

env:
  go_version: "1.18"
  node_version: "16"

jobs:
  lint-backend:
    name: Backend - Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^${{ env.go_version }}
      - run: go generate
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45
          args: --timeout=5m

  test-backend:
    name: Backend - Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^${{ env.go_version }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go generate
      - name: Test
        run: go test ./...

  build-backend:
    name: Backend - Build
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^${{ env.go_version }}
      - run: go generate
      - run: go build -ldflags='-w -s'

  frontend-lint:
    name: Frontend - Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js for use with actions
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm --prefix frontend install --prefer-offline --no-audit
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
      - run: npm --prefix frontend run lint

  build-frontend:
    name: Frontend - Build
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js for use with actions
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node_version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm --prefix frontend install --prefer-offline --no-audit
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
      - name: Build
        run: npm --prefix frontend run build
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
